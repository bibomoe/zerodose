<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// Include REST_Controller library
require APPPATH . '/libraries/REST_Controller.php';

// Use the correct namespace for REST_Controller
use Restserver\Libraries\REST_Controller;

/**
 * API Controller for handling User CRUD operations
 */
class Example extends REST_Controller {

    public function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Set the request rate limits
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_put']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    /**
     * GET method for fetching users or a specific user by ID
     */
    public function users_get()
    {
        // Example data (Replace with your database model logic)
        $users = [
            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com'],
            ['id' => 2, 'name' => 'Jane', 'email' => 'jane@example.com'],
            ['id' => 3, 'name' => 'Jim', 'email' => 'jim@example.com']
        ];

        // Get user ID from query parameters
        $id = $this->get('id');

        // If the id parameter is null, return all users
        if ($id === NULL)
        {
            // Check if the users data exists
            if ($users)
            {
                $this->response($users, REST_Controller::HTTP_OK); // OK (200)
            }
            else
            {
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404)
            }
        }
        else
        {
            // Validate ID and return a specific user
            $id = (int) $id;
            if ($id <= 0)
            {
                $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400)
            }

            // Search for the user by ID
            $user = NULL;
            foreach ($users as $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $user = $value;
                    break;
                }
            }

            // Return the user data if found
            if ($user)
            {
                $this->set_response($user, REST_Controller::HTTP_OK); // OK (200)
            }
            else
            {
                $this->set_response([
                    'status' => FALSE,
                    'message' => 'User could not be found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404)
            }
        }
    }

    /**
     * POST method for creating a new user
     */
    public function users_post()
    {
        // Simulate saving the new user (Replace with your database model logic)
        $message = [
            'id' => 100, // ID automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'User created successfully'
        ];

        // Respond with a 201 Created status
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201)
    }

    /**
     * PUT method for updating an existing user
     */
    public function users_put()
    {
        // Get the user ID
        $id = (int) $this->get('id');
        
        // Validate the ID
        if ($id <= 0)
        {
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400)
        }

        // Simulate updating the user (Replace with your database model logic)
        $message = [
            'id' => $id,
            'name' => $this->put('name'),
            'email' => $this->put('email'),
            'message' => 'User updated successfully'
        ];

        // Respond with a 200 OK status
        $this->set_response($message, REST_Controller::HTTP_OK); // OK (200)
    }

    /**
     * DELETE method for deleting a user by ID
     */
    public function users_delete()
    {
        // Get the user ID
        $id = (int) $this->get('id');

        // Validate the ID
        if ($id <= 0)
        {
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400)
        }

        // Simulate deleting the user (Replace with your database model logic)
        $message = [
            'id' => $id,
            'message' => 'User deleted successfully'
        ];

        // Respond with a 204 No Content status
        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204)
    }

    public function csrf_token_get()
    {
        // Mengembalikan CSRF token
        $this->response([
            'csrf_token_name' => $this->security->get_csrf_token_name(),
            'csrf_token_value' => $this->security->get_csrf_hash()
        ], REST_Controller::HTTP_OK);
    }

}
